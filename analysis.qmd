---
title: "Distinction Centrality Analysis"
execute: 
  eval: true
  echo: false
  output: true
  warning: false
  message: false
---

```{r Loading Functions}
   library(igraph)
   library(ggraph)
   library(here)
   library(networkdata)
   library(ggpubr)
   source("distinction.R")
```


```{r}
   tab.cent <- function(x, d = 3, name = "name", caption = "", label = "label") { #table function
   library(kableExtra)
   t <- kbl(x, 
            format = "latex", booktabs = TRUE, linesep = "",
            digits = d, row.names = FALSE,
            col.names = c("Node", "Distinction", "SDistinction", "Status", "Constraint", "Scalar"),
            caption = caption, label = label
            ) %>% 
            kable_styling(bootstrap_options = c("hover", "condensed", "responsive")) %>% 
            save_kable(file = here("Tabs", paste(name, ".tex", sep = "")))
   }
```


```{r Toy Examples}
    g1 <- make_star(7, mode = "undirected") # star graph
    g2 <- g1 + edge(2,3)
    g2 <- g2 + edge(2,4)
    g2 <- g2 + edge(3,4)
    g2 <- g2 + edge(5,6)
    g2 <- g2 + edge(5,7)
    g2 <- g2 + edge(6,7) # structural fold
    g3 <- g1 + edge(2,4)
    g3 <- g3 + edge(3,4)
    g3 <- g3 + edge(5,6)
    g3 <- g3 + edge(5,7) # intra-connected clusters
    g4 <- g3 + edge(2,7) # inter-connected clusters
    tab.cent(distinction(g1), name = "star", label = "tab:star")
    tab.cent(distinction(g2), name = "structfold", label = "tab:sf")
    tab.cent(distinction(g3), name = "intraclust", label = "tab:intra")
    tab.cent(distinction(g4), name = "interclust", label = "tab:inter")
```

```{r}
   plot.graph.norm <- function(x, l = "kk", vs = 12, ts = 6) { #plotting function
      library(ggraph)
      d <- distinction(x)[,3]
      nc <- rep("", length(d))
      nc[which(d < -0.05)] <- "red"
      nc[which(d > 0.05)] <- "blue"
      nc[which(d <= 0.05 & d >= -0.05)] <- "purple"
      if (is.null(V(x)$name) == TRUE) {
         n <- 1:vcount(x)
         tc <- "white"
         s <- vs
         }
      if (is.null(V(x)$name) == FALSE) {
         n <- V(x)$name
         tc <- nc
         vs <- 0
         }
      p <- ggraph(x, layout = l)
      p <- p + geom_edge_link(color = "steelblue", edge_width = 0.5)
      p <- p + geom_node_point(aes(x = x, y = y), size = vs, color = nc) 
      p <- p + geom_node_text(aes(label = n), size = ts, color = tc, fontface = "bold")
      p <- p + theme_graph() 
   return(p)
   }
```

```{r}
   png(here("Plots", "star.png"))
   plot.graph.norm(g1)
   dev.off()
   png(here("Plots", "sf.png"))
   plot.graph.norm(g2)
   dev.off()
   png(here("Plots", "intra.png"))
   plot.graph.norm(g3)
   dev.off()
   png(here("Plots", "inter.png"))
   plot.graph.norm(g4)
   dev.off()
```


```{r}
   medici1 <- as.matrix(read.csv(here("Data", "MediciEdgeList.csv")))
   medici1 <- graph_from_edgelist(medici1, directed = FALSE)
   medici2 <- as.matrix(read.csv(here("Data", "MediciEdgeListMarriageCut.csv")))
   medici2 <- graph_from_edgelist(medici2, directed = FALSE)
   nomedici <- as.matrix(read.csv(here("Data", "NoMediciEdgeList.csv")))
   nomedici <- graph_from_edgelist(nomedici, directed = FALSE)
   png(here("Plots", "medici.png"), height = 600, width = 1000)
      plot.graph.norm(medici1, ts = 5)
   dev.off()
   png(here("Plots", "nomedici.png"), height = 600, width = 1000)
      plot.graph.norm(nomedici, ts = 5)
   dev.off()
   
```

```{r}
   g <- as.matrix(read.csv(here("Data", "searchmodeltest.csv")))
   g <- graph_from_edgelist(g, directed = FALSE)
   distinction(g)
```



