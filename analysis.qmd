---
title: "Distinction Centrality Analysis"
execute: 
  eval: true
  echo: false
  output: true
  warning: false
  message: false
---

```{r Loading Functions}
   library(igraph)
   library(ggraph)
   library(here)
   library(networkdata)
   library(ggpubr)
   library(patchwork)
   source(here("Functions", "distinction.R"))
   source(here("Functions", "make.broker.trees.R"))
   source(here("Functions", "make.broker.cliques.R"))
   source(here("Functions", "plot.graph.norm.R"))
   source(here("Functions", "tab.cent.R"))
```

## Toy Networks

```{r Toy Examples}
   g1 <- make_star(7, mode = "undirected") # star graph
   g2 <- g1 + edge(2,3)
   g2 <- g2 + edge(2,4)
   g2 <- g2 + edge(3,4)
   g2 <- g2 + edge(5,6)
   g2 <- g2 + edge(5,7)
   g2 <- g2 + edge(6,7) # structural fold
   g3 <- g1 + edge(2,4)
   g3 <- g3 + edge(3,4)
   g3 <- g3 + edge(5,6)
   g3 <- g3 + edge(5,7) # intra-connected clusters
   g4 <- g3 + edge(2,7) # inter-connected clusters
   g5 <- make_ring(7) #circle graph
   g6 <- g5 + edge(6,1) # circle graph plus triangle
   g7 <- g5 + edge(7,4) # circle graph plus long tie
   g8 <- make_full_graph(7, directed = FALSE) # clique
   g9 <- make_full_graph(6, directed = FALSE)
   g9 <- add_vertices(g9, 1)
   g9 <- g9 + edge(1,7) # kite
   g10 <- union(make_ring(7), make_star(7, center = 1, mode = "undirected"))
   g10 <- g10 + edge(2,7)
```

```{r Toy Networks Plots}
   png(here("Plots", "Toys", "star.png"))
   plot.graph.norm(g1, l = "kk")
   dev.off()
   png(here("Plots", "Toys", "sf.png"))
   plot.graph.norm(g2, l = "kk")
   dev.off()
   png(here("Plots", "Toys", "intra.png"))
   plot.graph.norm(g3, l = "auto")
   dev.off()
   png(here("Plots", "Toys", "inter.png"))
   plot.graph.norm(g4, l = "auto")
   dev.off()
   png(here("Plots", "Toys", "circle.png"))
   plot.graph.norm(g5, l = "circle")
   dev.off()
   png(here("Plots", "Toys", "circle-plus-triangle.png"))
   plot.graph.norm(g6, l = "circle")
   dev.off()
   png(here("Plots", "Toys", "circle-plus-long.png"))
   plot.graph.norm(g7, l = "circle")
   dev.off()
   png(here("Plots", "Toys", "clique.png"))
   plot.graph.norm(g8, l = "kk")
   dev.off()
   png(here("Plots", "Toys", "kite.png"))
   plot.graph.norm(g9, l = "kk")
   dev.off()
   png(here("Plots", "Toys", "wheel.png"))
   plot.graph.norm(g10, l = "kk")
   dev.off()
```

```{r Toy Network Distinction Tables}
    tab.cent(distinction(g1), name = "star", label = "tab:star")
    tab.cent(distinction(g2), name = "structfold", label = "tab:sf")
    tab.cent(distinction(g3), name = "intraclust", label = "tab:intra")
    tab.cent(distinction(g4), name = "interclust", label = "tab:inter")
    tab.cent(distinction(g5), name = "circle", label = "tab:circle")
    tab.cent(distinction(g6), name = "circletriangle", label = "tab:circletriangle")
    tab.cent(distinction(g7), name = "circlelong", label = "tab:circlelong")
    tab.cent(distinction(g8), name = "clique", label = "tab:clique")
    tab.cent(distinction(g9), name = "kite", label = "tab:kite")
    tab.cent(distinction(g10), name = "wheel", label = "tab:wheel")
```

## Medici

```{r Loading Medici Data}
   medici1 <- as.matrix(read.csv(here("Data", "MediciEdgeList.csv")))
   medici1 <- graph_from_edgelist(medici1, directed = FALSE)
   medici2 <- as.matrix(read.csv(here("Data", "MediciEdgeListMarriageCut.csv")))
   medici2 <- graph_from_edgelist(medici2, directed = FALSE)
   nomedici <- as.matrix(read.csv(here("Data", "NoMediciEdgeList.csv")))
   nomedici <- graph_from_edgelist(nomedici, directed = FALSE)
```

```{r Medici Distintion Plots}
   png(here("Plots", "medici.png"), height = 600, width = 1000)
      plot.graph.norm(medici1, ts = 5)
   dev.off()
   png(here("Plots", "nomedici.png"), height = 600, width = 1000)
      plot.graph.norm(nomedici, ts = 5)
   dev.off()
```

## Search

```{r Search Model Distinction}
   g <- as.matrix(read.csv(here("Data", "searchmodeltest.csv")))
   g <- graph_from_edgelist(g, directed = FALSE)
   distinction(g)
```

## Connected Caves Computational Experiments
```{r}
   source(here("Functions", "connect.caves.R"))
   set.seed(456)
   b <- connect.caves(c = 4, nc = 4, n = 24)
   gg2 <- function(x, lay.o = "kk") {
      n <- vcount(x)
      V(x)$name <- 1:n
      d <- distinction(x)[, 3]
      c <-  vector(mode = "character", length = length(d))
      c[which(d < -0.05)] <- "tan2"
      c[which(d > 0.05)] <- "blue"
      c[which(d >=-0.05 & d <= 0.05)] <- "purple"
      c[which(d == max(d))] <- "red"
      w <- ggraph(x, layout = lay.o) + 
      geom_edge_link(color = "steelblue") + theme_graph() +
      geom_node_point(size = 5, color = c) + 
      geom_node_text(aes(label = name), color = "white", size = 3) 
      return(w)
      }
   p.list <- lapply(b, gg2, lay.o = "auto")
   for (i in 1:length(p.list)) {
      p.list[[i]] <- p.list[[i]] + ggtitle(paste("N. Long Ties =", i-1)) +
         theme(plot.title = element_text(size = 11))
      }
   wrap_plots(p.list[c(1:4)], nrow = 2)
   ggsave(here("Plots", "connected-caves-examples1.png"), width = 10, height = 10, units = "in")
   wrap_plots(p.list[c(5:8)], nrow = 2)
   ggsave(here("Plots", "connected-caves-examples2.png"), width = 10, height = 10, units = "in")
   wrap_plots(p.list[c(9:12)], nrow = 2)
   ggsave(here("Plots", "connected-caves-examples3.png"), width = 10, height = 10, units = "in")
   wrap_plots(p.list[c(13:16)], nrow = 2)
   ggsave(here("Plots", "connected-caves-examples4.png"), width = 10, height = 10, units = "in")
```

## Broker Computational Experiements

```{r}
   b <- make.broker.trees(30)
   c <- lapply(b, distinction.new, norm = FALSE)
```

```{r}
   library(patchwork)
   library(ggraph)
   p.list <- lapply(b, gg)
   for (i in 1:length(p.list)) {
      p.list[[i]] <- p.list[[i]] + ggtitle(paste("N. Branches =", i+1)) +
         theme(plot.title = element_text(size = 11))
      }
   wrap_plots(p.list[c(1:6)], nrow = 2)
   ggsave(here("Plots", "tree-examples.png"), width = 12, height = 8, units = "in")
```

```{r}
   d.s <- sapply(c, function(x) {x[1, 3]})
   d.b <- sapply(c, function(x) {x[2, 3]})
   d.p <- sapply(c, function(x) {x[nrow(x), 3]})
   dat <- data.frame(d = c(d.s, d.b, d.p), 
         n = c(1:length(d.s)+1, 1:length(d.s)+1, 1:length(d.s)+1),
         g = c(rep(1, length(d.s)), rep(2, length(d.s)), 
         rep(3, length(d.s)))) |> 
         mutate(g = factor(g, labels = c("Star", "Gatekeeper", "Peripheral")))
   p <- ggplot(dat, aes(n, d, group = g, color = as.factor(g))) 
   p <- p + geom_point(size = 3)
   p <- p + geom_line(linewidth = 0.75)
   p <- p + geom_hline(yintercept = 0, color = "red", linetype = 2)
   p <- p + labs(y = "", x = "Number of Branches")
   p <- p + scale_x_continuous(breaks = seq(2, length(d.s), by = 2))
   p <- p + scale_color_manual(values = c("red", "blue", "tan2"))
   p <- p + theme_minimal()
   p <- p + theme(axis.text = element_text(size = 14, face = "bold"),
                  axis.title = element_text(size = 16, face = "bold"),
                  legend.text = element_text(size = 16, face = "bold"),
                  legend.title = element_blank(),
                  legend.position = "top"
                  )
   p
   ggsave(here("Plots", "broker-tree-roles-by-nbranches.png"), width = 7, height = 7, units = "in")
```

```{r}
   p.list <- lapply(b, gg, star = 9)
   for (i in 1:length(p.list)) {
      p.list[[i]] <- p.list[[i]] + ggtitle(paste("N. Branches =", i+1)) +
         theme(plot.title = element_text(size = 11))
      }
   wrap_plots(p.list[c(1:6)], nrow = 2)
   ggsave(here("Plots", "clique-examples.png"), width = 12, height = 8, units = "in")
```

```{r}
   d.s <- sapply(c, function(x) {x[9, 3]})
   d.b <- sapply(c, function(x) {x[4, 3]})
   d.p <- sapply(c, function(x) {x[1, 3]})
   dat <- data.frame(d = c(d.s, d.b, d.p), 
         n = c(1:length(d.s)+1, 1:length(d.s)+1, 1:length(d.s)+1),
         g = c(rep(1, length(d.s)), rep(2, length(d.s)), 
         rep(3, length(d.s)))) |> 
         mutate(g = factor(g, labels = c("Star", "Gatekeeper", "Peripheral")))
   p <- ggplot(dat, aes(n, d, group = g, color = as.factor(g))) 
   p <- p + geom_point(size = 3)
   p <- p + geom_line(linewidth = 0.75)
   p <- p + geom_hline(yintercept = 0, color = "red", linetype = 2)
   p <- p + labs(y = "", x = "Number of Branches")
   p <- p + scale_x_continuous(breaks = seq(2, length(d.s), by = 2))
   p <- p + scale_color_manual(values = c("red", "blue", "tan2"))
   p <- p + theme_minimal()
   p <- p + theme(axis.text = element_text(size = 14, face = "bold"),
                  axis.title = element_text(size = 16, face = "bold"),
                  legend.text = element_text(size = 16, face = "bold"),
                  legend.title = element_blank(),
                  legend.position = "top"
                  )
   p
   ggsave(here("Plots", "broker-cliques-roles-by-nbranches.png"), width = 7, height = 7, units = "in")
```
