---
title: "Distinction Centrality Analysis"
execute: 
  eval: true
  echo: false
  output: true
  warning: false
  message: false
---

```{r Loading Functions}
   library(igraph)
   library(ggraph)
   library(here)
   library(networkdata)
   library(ggpubr)
   library(patchwork)
   library(dplyr)
   source(here("Functions", "distinction.R"))
   source(here("Functions", "plot.graph.norm.R"))
```

## Toy Networks

```{r Toy Examples}
   source(here("Functions", "distinction.R"))
   g1 <- make_star(7, mode = "undirected") # star graph
   g2 <- g1 + edge(2,3)
   g2 <- g2 + edge(2,4)
   g2 <- g2 + edge(3,4)
   g2 <- g2 + edge(5,6)
   g2 <- g2 + edge(5,7)
   g2 <- g2 + edge(6,7) # structural fold
   g3 <- g1 + edge(2,4)
   g3 <- g3 + edge(3,4)
   g3 <- g3 + edge(5,6)
   g3 <- g3 + edge(5,7) # intra-connected clusters
   g4 <- g3 + edge(2,7) # inter-connected clusters
   g5 <- make_ring(7) #circle graph
   g6 <- g5 + edge(6,1) # circle graph plus triangle
   g7 <- g5 + edge(7,4) # circle graph plus long tie
   g8 <- make_full_graph(7, directed = FALSE) # clique
   g9 <- make_full_graph(6, directed = FALSE)
   g9 <- add_vertices(g9, 1)
   g9 <- g9 + edge(1,7) # kite
   g10 <- g1 + edge(2,3)
   g10 <- g10 + edge(3,4)
   g10 <- g10 + edge(4,5)
   g10 <- g10 + edge(5,6)
   g10 <- g10 + edge(6,7)
   g10 <- g10 + edge(7,2) #wheel graph
   g11 <- make_ring(8) 
   g11 <- delete_vertices(g11, 8) #path graph
```

```{r}
   source(here("Functions", "distinction.R"))
   distinction(g11, norm = "one")
```

```{r Bonacich examples}
   g13 <- make_empty_graph(10, directed = FALSE)
   g13 <- g13 + edge(1,2)
   g13 <- g13 + edge(1,3)
   g13 <- g13 + edge(1,9)
   g13 <- g13 + edge(2,3)
   g13 <- g13 + edge(2,10)
   g13 <- g13 + edge(3,4)
   g13 <- g13 + edge(4,5)
   g13 <- g13 + edge(4,6)
   g13 <- g13 + edge(5,10)
   g13 <- g13 + edge(5,6)
   g13 <- g13 + edge(6,7)
   g13 <- g13 + edge(7,8)
   g13 <- g13 + edge(7,9)
   g13 <- g13 + edge(8,10)
   g13 <- g13 + edge(8,9) #Bonacich (2007) regular network Fig. 5
   g14 <- make_empty_graph(12, directed = FALSE)
   g14 <- g14 + edge(1,2)
   g14 <- g14 + edge(1,6)
   g14 <- g14 + edge(1,7)
   g14 <- g14 + edge(2,3)
   g14 <- g14 + edge(2,10)
   g14 <- g14 + edge(3,4)
   g14 <- g14 + edge(3,8)
   g14 <- g14 + edge(4,5)
   g14 <- g14 + edge(4,11)
   g14 <- g14 + edge(5,6)
   g14 <- g14 + edge(5,9)
   g14 <- g14 + edge(6,12)
   g14 <- g14 + edge(7,8)
   g14 <- g14 + edge(7,9)
   g14 <- g14 + edge(8,9)
   g14 <- g14 + edge(10,11)
   g14 <- g14 + edge(10,12)
   g14 <- g14 + edge(11,12)
```

```{r Estrada examples}
   g15 <- make_empty_graph(8, directed = FALSE)
   g15 <- g15 + edge(1,2)
   g15 <- g15 + edge(1,5)
   g15 <- g15 + edge(1,8)
   g15 <- g15 + edge(2,3)
   g15 <- g15 + edge(2,8)
   g15 <- g15 + edge(3,4)
   g15 <- g15 + edge(3,6)
   g15 <- g15 + edge(4,5)
   g15 <- g15 + edge(4,7)
   g15 <- g15 + edge(5,6)
   g15 <- g15 + edge(6,7)
   g15 <- g15 + edge(7,8) #Fig 1(a) https://doi.org/10.1103/PhysRevE.71.056103
   g16 <- make_full_graph(9, directed = FALSE)
   g16 <- g16 - edge("1|6")
   g16 <- g16 - edge("1|5")
   g16 <- g16 - edge("2|4")
   g16 <- g16 - edge("2|9")
   g16 <- g16 - edge("3|6")
   g16 <- g16 - edge("3|8")
   g16 <- g16 - edge("4|7")
   g16 <- g16 - edge("5|8")
   g16 <- g16 - edge("7|9") #Fig 1(b) https://doi.org/10.1103/PhysRevE.71.056103
```

```{r Toy Networks Plots}
   source(here("Functions", "distinction.R"))
   source(here("Functions", "plot.graph.norm.R"))
   png(here("Plots", "Toys", "star.png"))
   plot.graph.norm(g1, l = "kk")
   dev.off()
   png(here("Plots", "Toys", "sf.png"))
   plot.graph.norm(g2, l = "kk")
   dev.off()
   png(here("Plots", "Toys", "intra.png"))
   plot.graph.norm(g3, l = "auto")
   dev.off()
   png(here("Plots", "Toys", "inter.png"))
   plot.graph.norm(g4, l = "auto")
   dev.off()
   png(here("Plots", "Toys", "circle.png"))
   plot.graph.norm(g5, l = "circle")
   dev.off()
   png(here("Plots", "Toys", "circle-plus-triangle.png"))
   plot.graph.norm(g6, l = "circle")
   dev.off()
   png(here("Plots", "Toys", "circle-plus-long.png"))
   plot.graph.norm(g7, l = "circle")
   dev.off()
   png(here("Plots", "Toys", "clique.png"))
   plot.graph.norm(g8, l = "kk")
   dev.off()
   png(here("Plots", "Toys", "kite.png"))
   plot.graph.norm(g9, l = "kk")
   dev.off()
   png(here("Plots", "Toys", "wheel.png"))
   plot.graph.norm(g10, l = "kk")
   dev.off()
   png(here("Plots", "Toys", "path.png"))
   plot.graph.norm(g11, l = "kk")
   dev.off()
   source(here("Functions", "plot.graph.cat.R"))
   png(here("Plots", "Toys", "bonacich1.png"))
   plot.graph.cat(g13, l = "circle")
   dev.off()
   png(here("Plots", "Toys", "bonacich2.png"))
   plot.graph.cat(g14, l = "circle")
   dev.off()
   png(here("Plots", "Toys", "estrada1.png"))
   plot.graph.cat(g15, l = "circle")
   dev.off()
   png(here("Plots", "Toys", "estrada2.png"))
   plot.graph.cat(g16, l = "circle")
   dev.off()
```

```{r Toy Network Distinction Tables}
   source(here("Functions", "tab.cent.R"))
   tab.cent(distinction(g1), name = "star", 
   label = "star", rownames = c("1", "2, 3, 4, 5, 6, 7"),
   caption = "Distinction centrality scores for the star graph.")
   tab.cent(distinction(g2), name = "structfold", 
   label = "sf", rownames = c("1", "2, 3, 4, 5, 6, 7"),
   caption = "Distinction centrality scores for the structural fold graph.")
   tab.cent(distinction(g3), name = "intraclust", 
   label = "intra", , rownames =  c("1", "2, 3, 6, 7", "4, 5"),
   caption = "Distinction centrality scores for the intra-connected clusters graph.")
   tab.cent(distinction(g4), name = "interclust", 
   label = "inter", rownames =  c("1", "2, 7", "3, 6", "4, 5"),
   caption = "Distinction centrality scores for the inter-connected clusters graph.")
   tab.cent(distinction(g5), name = "circle", 
   label = "circle", rownames = c("1, 2, 3, 4, 5, 6, 7"),
   caption = "Distinction centrality scores for the circle graph.")
   tab.cent(distinction(g6), name = "circletriangle", 
   label = "circletriangle",  rownames = c("1, 6", "2, 5", "3, 4", "7"),
   caption = "Distinction centrality scores for the circle graph with triangle.")
   tab.cent(distinction(g7), name = "circlelong", 
   label = "circlelong", rownames = c("1, 3", "2", "4, 7", "5, 6"),
   caption = "Distinction centrality scores for the circle graph with long tie.")
   tab.cent(distinction(g8), name = "clique", 
   label = "clique", rownames = c("1, 2, 3, 4, 5, 6, 7"),
   caption = "Distinction centrality scores for the clique graph.")
   tab.cent(distinction(g9), name = "kite", 
   label = "kite", rownames = c("1", "2, 3, 4, 5, 6", "7"),
   caption = "Distinction centrality scores for the kite graph.")
   tab.cent(distinction(g10), name = "wheel", 
   label = "wheel", rownames = c("1", "2, 3, 4, 5, 6, 7"),
   caption = "Distinction centrality scores for the wheel graph.")
   tab.cent(distinction(g11), name = "path", 
   label = "path", rownames = c("1, 7", "2, 6", "3, 5", "4"),
   caption = "Distinction centrality scores for the path graph.")
```

## Medici

```{r Loading Medici Data}
   medici1 <- as.matrix(read.csv(here("Data", "MediciEdgeList.csv")))
   medici1 <- graph_from_edgelist(medici1, directed = FALSE)
   medici2 <- as.matrix(read.csv(here("Data", "MediciEdgeListMarriageCut.csv")))
   medici2 <- graph_from_edgelist(medici2, directed = FALSE)
   nomedici <- as.matrix(read.csv(here("Data", "NoMediciEdgeList.csv")))
   nomedici <- graph_from_edgelist(nomedici, directed = FALSE)
```

```{r Medici Distintion Plots}
   png(here("Plots", "medici.png"), height = 600, width = 1000)
      plot.graph.norm(medici1, ts = 5)
   dev.off()
   png(here("Plots", "nomedici.png"), height = 600, width = 1000)
      plot.graph.norm(nomedici, ts = 5)
   dev.off()
```

## Search

```{r Search Model Distinction}
   g <- as.matrix(read.csv(here("Data", "searchmodeltest.csv")))
   g <- graph_from_edgelist(g, directed = FALSE)
   distinction(g)
```

## Star Graph Computational Experiments

```{r}
   source(here("Functions", "distinction.R"))
   make.stars <- function(n = 30) {
      gl <- vector(mode = "list", length = n)
      gl[[1]] <- make_star(3, mode = "undirected") 
      for (k in 2:n) {
         gl[[k]] <- make_star(k+2, mode = "undirected") 
         }
      return(gl)
      }
   b <- make.stars(33)
   c <- lapply(b, distinction, norm = "max")
   ds.s <- sapply(c, function(x) {x[1, 3]})
   ds.p <- sapply(c, function(x) {x[2, 3]})
   d.s <- sapply(c, function(x) {x[1, 2]})
   d.p <- sapply(c, function(x) {x[2, 2]})
   dat <- data.frame(d = c(ds.s, ds.p, d.s, d.p), 
         n = c(1:length(d.s), 1:length(d.s), 1:length(d.s), 1:length(d.s)),
         g = c(rep(1, length(d.s)), rep(2, length(d.s)), 
         rep(3, length(d.s)), rep(4, length(d.s)))) |> 
         mutate(g = factor(g, labels = c(
                           "Scaled Distinction (Central Node)", 
                           "Scaled Distinction (Peripheral Nodes)", 
                           "Non-scaled Distinction (Central Node)",
                           "Non-scaled Distinction (Peripheral Nodes)"))) |> 
         mutate(n = n + 2)
   p <- ggplot(dat, aes(n, d, group = g, color = as.factor(g))) 
   p <- p + geom_point(size = 3)
   p <- p + geom_line(linewidth = 0.75)
   p <- p + geom_hline(yintercept = 0, color = "red", linetype = 2)
   p <- p + labs(y = "", x = "Star Size")
   p <- p + scale_x_continuous(breaks = seq(3, length(d.s), by = 3))
   p <- p + scale_color_manual(values = c("red", "blue", "tan2", "purple"))
   p <- p + theme_minimal()
   p <- p + theme(axis.text = element_text(size = 14, face = "bold"),
                  axis.title = element_text(size = 16, face = "bold"),
                  legend.text = element_text(size = 12, face = "bold"),
                  legend.title = element_blank(),
                  legend.position = "bottom"
                  )
   p <- p + guides(color = guide_legend(nrow = 4))
   p
   ggsave(here("Plots", "star-roles-by-size.png"), width = 7, height = 8, units = "in")
```
## Connected Caves Computational Experiments
```{r}
   source(here("Functions", "connect.caves.R"))
   source(here("Functions", "gg2.R"))
   set.seed(456)
   b <- connect.caves(c = 4, nc = 4, n = 24)
   p.list <- lapply(b, gg2, lay.o = "auto")
   for (i in 1:length(p.list)) {
      p.list[[i]] <- p.list[[i]] + ggtitle(paste("N. Long Ties =", i-1)) +
         theme(plot.title = element_text(size = 11))
      }
   wrap_plots(p.list[c(1:4)], nrow = 2)
   ggsave(here("Plots", "connected-caves-examples1.png"), width = 10, height = 10, units = "in")
   wrap_plots(p.list[c(5:8)], nrow = 2)
   ggsave(here("Plots", "connected-caves-examples2.png"), width = 10, height = 10, units = "in")
   wrap_plots(p.list[c(9:12)], nrow = 2)
   ggsave(here("Plots", "connected-caves-examples3.png"), width = 10, height = 10, units = "in")
   wrap_plots(p.list[c(13:16)], nrow = 2)
   ggsave(here("Plots", "connected-caves-examples4.png"), width = 10, height = 10, units = "in")
```

## Broker Computational Experiments

```{r}
   source(here("Functions", "make.broker.trees.R"))
   source(here("Functions", "gg.R"))
   b <- make.broker.trees(30)
   p.list <- lapply(b, gg)
   for (i in 1:length(p.list)) {
      p.list[[i]] <- p.list[[i]] + ggtitle(paste("N. Branches =", i+1)) +
         theme(plot.title = element_text(size = 11))
      }
   wrap_plots(p.list[c(1:6)], nrow = 2)
   ggsave(here("Plots", "tree-examples.png"), width = 12, height = 8, units = "in")
   c <- lapply(b, distinction, norm = "abm")
   d.s <- sapply(c, function(x) {x[1, 3]})
   d.b <- sapply(c, function(x) {x[2, 3]})
   d.p <- sapply(c, function(x) {x[nrow(x), 3]})
   dat <- data.frame(d = c(d.s, d.b, d.p), 
         n = c(1:length(d.s)+1, 1:length(d.s)+1, 1:length(d.s)+1),
         g = c(rep(1, length(d.s)), rep(2, length(d.s)), 
         rep(3, length(d.s)))) |> 
         mutate(g = factor(g, labels = c("Star", "Gatekeeper", "Peripheral")))
   p <- ggplot(dat, aes(n, d, group = g, color = as.factor(g))) 
   p <- p + geom_point(size = 3)
   p <- p + geom_line(linewidth = 0.75)
   p <- p + geom_hline(yintercept = 0, color = "red", linetype = 2)
   p <- p + labs(y = "", x = "Number of Branches")
   p <- p + scale_x_continuous(breaks = seq(2, length(d.s), by = 2))
   p <- p + scale_color_manual(values = c("red", "blue", "tan2"))
   p <- p + theme_minimal()
   p <- p + theme(axis.text = element_text(size = 14, face = "bold"),
                  axis.title = element_text(size = 16, face = "bold"),
                  legend.text = element_text(size = 16, face = "bold"),
                  legend.title = element_blank(),
                  legend.position = "top"
                  )
   p
   ggsave(here("Plots", "broker-tree-roles-by-nbranches.png"), width = 7, height = 7, units = "in")
```

```{r}
   source(here("Functions", "make.broker.cliques.R"))
   source(here("Functions", "gg.R"))
   b <- make.broker.cliques(30)
   p.list <- lapply(b, gg, star = 9)
   for (i in 1:length(p.list)) {
      p.list[[i]] <- p.list[[i]] + ggtitle(paste("N. Branches =", i+1)) +
         theme(plot.title = element_text(size = 11))
      }
   wrap_plots(p.list[c(1:6)], nrow = 2)
   ggsave(here("Plots", "clique-examples.png"), width = 12, height = 8, units = "in")

   d.s <- sapply(c, function(x) {x[9, 3]})
   d.b <- sapply(c, function(x) {x[4, 3]})
   d.p <- sapply(c, function(x) {x[1, 3]})
   dat <- data.frame(d = c(d.s, d.b, d.p), 
         n = c(1:length(d.s)+1, 1:length(d.s)+1, 1:length(d.s)+1),
         g = c(rep(1, length(d.s)), rep(2, length(d.s)), 
         rep(3, length(d.s)))) |> 
         mutate(g = factor(g, labels = c("Star", "Gatekeeper", "Peripheral")))
   p <- ggplot(dat, aes(n, d, group = g, color = as.factor(g))) 
   p <- p + geom_point(size = 3)
   p <- p + geom_line(linewidth = 0.75)
   p <- p + geom_hline(yintercept = 0, color = "red", linetype = 2)
   p <- p + labs(y = "", x = "Number of Branches")
  # p <- p + scale_x_continuous(breaks = seq(2, length(d.s), by = 2))
   p <- p + scale_color_manual(values = c("red", "blue", "tan2"))
   p <- p + theme_minimal()
   p <- p + theme(axis.text = element_text(size = 14, face = "bold"),
                  axis.title = element_text(size = 16, face = "bold"),
                  legend.text = element_text(size = 16, face = "bold"),
                  legend.title = element_blank(),
                  legend.position = "top"
                  )
   p
   ggsave(here("Plots", "broker-cliques-roles-by-nbranches.png"), width = 7, height = 7, units = "in")
```
