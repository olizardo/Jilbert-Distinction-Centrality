---
title: "Distinction Centrality Analysis"
execute: 
  eval: true
  echo: false
  output: true
  warning: false
  message: false
---

## Setup

```{r Loading Functions}
   library(igraph)
   library(ggraph)
   library(here)
   library(networkdata)
   library(ggpubr)
   library(patchwork)
   library(dplyr)
   source(here("Functions", "distinction.R"))
   source(here("Functions", "plot.graph.norm.R"))
   source(here("Functions", "tab.cent.R"))
   plot.toys <- function(x, n, l) {
      ggsave(here("Plots", "Toys", n), 
         plot = plot.graph.norm(x, l = l)
         )
      }
   del.names <- function(x) {
      return(delete_vertex_attr(x, "name"))
      }
```

## Toy Networks

```{r Building Blocks}
   c3 <- make_full_graph(3, directed = FALSE) # triangle
   c4 <- make_full_graph(4, directed = FALSE) # 4-clique
   c5 <- make_full_graph(5, directed = FALSE) # 5-clique
   t3 <- make_tree(n = 4, children = 3, mode = "undirected") # 3-tree
   t2 <- make_tree(n = 3, children = 2, mode = "undirected") # 2-tree
```

```{r Basic Toy Graphs}
   ## Star
   s7 <- make_star(7, mode = "undirected") # 7-star graph
   plot.toys(s7, "star.png", "kk")
   tab.cent(distinction(s7), name = "star", 
   label = "star", rownames = c("1", "2, 3, 4, 5, 6, 7"),
   caption = "Distinction centrality scores for the star graph.")
   ## Clique
   c7 <- make_full_graph(7, directed = FALSE) # 7-clique
   plot.toys(c7, "clique.png", "circle")
   tab.cent(distinction(c7), name = "clique", 
   label = "clique", rownames = c("1, 2, 3, 4, 5, 6, 7"),
   caption = "Distinction centrality scores for the clique graph.")
   ## Circle
   r7 <- make_ring(7) # 7-circle graph
   plot.toys(r7, "circle.png", "circle")
   tab.cent(distinction(r7), name = "circle", 
   label = "circle", rownames = c("1, 2, 3, 4, 5, 6, 7"),
   caption = "Distinction centrality scores for the circle graph.")
   ## Kite
   c6 <- make_full_graph(6, directed = FALSE) # 6-clique
   k7 <- add_vertices(c6, 1) # 6-clique plus node
   k7 <- k7 + edge(1,7) # 7-kite
   plot.toys(k7, "kite.png", "kk")
   tab.cent(distinction(k7), name = "kite", 
   label = "kite", rownames = c("1", "2, 3, 4, 5, 6", "7"),
   caption = "Distinction centrality scores for the kite graph.")
   ## Wheel
   r6 <- make_ring(6) # 6-circle graph
   V(r6)$name <- as.character(2:7)
   V(s7)$name <- as.character(1:7)
   w7 <- s7 + r6 # 7-wheel-graph
   r6 <- del.names(r6)
   s7 <- del.names(s7)
   w7 <- del.names(w7)
   plot.toys(w7, "wheel.png", "kk")
   tab.cent(distinction(w7), name = "wheel", 
   label = "wheel", rownames = c("1", "2, 3, 4, 5, 6, 7"),
   caption = "Distinction centrality scores for the wheel graph.")
   ## Path
   r8 <- make_ring(8) # 8-circle graph
   p7 <- delete_vertices(r8, 8) #path graph
   plot.toys(p7, "path.png", "kk")
   source(here("Functions", "tab.cent.R"))
   tab.cent(distinction(p7), name = "path", 
   label = "path", rownames = c("1, 7", "2, 6", "3, 5", "4"),
   caption = "Distinction centrality scores for the path graph.")
```

```{r Mediator versus Weld}
   ## Structural Fold (4-Clique)
   c1 <- c4
   c2 <- c4
   V(c1)$name <- as.character(1:4)
   V(c2)$name <- as.character(4:7)
   sf4 <- c1 + c2  # structural fold four-clique
   sf4 <- del.names(sf4)
   plot.toys(sf4, "sf4.png", "kk")
   tab.cent(distinction(sf4), name = "structfold4", 
   label = "sf4", rownames = c("4", "1, 2, 3, 5, 6, 7"),
   caption = "Distinction centrality scores for the structural fold graph (4-Clique).")
   ## Structural Fold (5-Clique)
   c1 <- c5
   c2 <- c5
   V(c1)$name <- as.character(1:5)
   V(c2)$name <- as.character(5:9)
   sf5 <- c1 + c2  # structural fold five-clique
   sf5 <- del.names(sf5)
   plot.toys(sf5, "sf5.png", "kk")
   tab.cent(distinction(sf5), name = "structfold5", 
   label = "sf5", rownames = c("5", "1, 2, 3, 4, 6, 7, 8, 9"),
   caption = "Distinction centrality scores for the structural fold graph (5-Clique).")
   ## Triangle Broker
   b3 <- c3 + c3
   b3 <- add_vertices(b3, 1)
   b3 <- b3 + edge(7,1)
   b3 <- b3 + edge(7,4) # broker between triangles
   plot.toys(b3, "broker3.png", "kk")
   tab.cent(distinction(sf5), name = "broker3", 
   label = "b3", rownames = c("1", "2, 3, 5, 6", "4", "7"),
   caption = "Distinction centrality scores for broker graph (3-clique).")
   ## Clique Broker
   b4 <- c4 + c4
   b4 <- add_vertices(b4, 1)
   b4 <- b4 + edge(9,1)
   b4 <- b4 + edge(9,5) # broker between four-cliques
   plot.toys(b4, "broker4.png", "kk")
   tab.cent(distinction(b4), name = "broker4", 
   label = "b4", rownames = c("1, 5", "2, 3, 4, 6, 7, 8", "9"),
   caption = "Distinction centrality scores for broker graph (4-Clique).")
```

```{r Triadic Closure}
   ## Circle Graph Plus Triangle
   ct <- r7 + edge(6,1) # circle graph plus triangle
   plot.toys(ct, "circle-triangle1.png", "circle")
   tab.cent(distinction(ct), name = "circletriangle", 
   label = "circletriangle",  rownames = c("1, 6", "2, 5", "3, 4", "7"),
   caption = "Distinction centrality scores for the circle graph with triangle.")
   ## Circle Graph Plus Long Tie
   cl <- r7 + edge(7,4) # circle graph plus long tie
   plot.toys(cl, "circle-long.png", "circle")
   tab.cent(distinction(cl), name = "circlelong", 
   label = "circlelong", rownames = c("1, 3", "2", "4, 7", "5, 6"),
   caption = "Distinction centrality scores for the circle graph with long tie.")
   ## Star Graph Plus Triangle
   st1 <- s7 + edge(2,3) # star graph plus one triangle
   plot.toys(st1, "star-triangle1.png", "kk")
   tab.cent(distinction(st1), name = "startriangle1", 
   label = "star1", rownames = c("1", "2, 3", "4, 5, 6, 7"),
   caption = "Distinction centrality scores for the star graph with one triangle.")
   ## Star Graph Plust Two Triangles
   st2 <- st1 + edge(5,6) # star graph plus two triangles
   plot.toys(st2, "star-triangle2.png", "kk")
   tab.cent(distinction(st2), name = "startriangle2", 
   label = "star2", rownames = c("1", "2, 3, 5, 6", "4, 7"),
   caption = "Distinction centrality scores for the star graph with two triangles.")
```

```{r Mediator Parameters}
   ## Tree Mediator (Two Branch)
   t222 <- t2 + t2
   t222 <- add_vertices(t222, 1)
   t222 <- t222 + edge(7, 1)
   t222 <- t222 + edge(7, 4) # tree mediator two branch
   plot.toys(t222, "tree-mediator2.png", "kk")
   tab.cent(distinction(t222), name = "treemediator2", 
   label = "tree2", rownames = c("1, 4", "2, 3, 5, 6", "7"),
   caption = "Distinction centrality scores for tree broker graph (two-branches).")
   ## Tree Mediator (Three Branch)
   t232 <- t3 + t3
   t232 <- add_vertices(t232, 1)
   t232 <- t232 + edge(9, 1)
   t232 <- t232 + edge(9, 5) # tree mediator three branch
   plot.toys(t232, "tree-mediator3.png", "kk")
   tab.cent(distinction(t232), name = "treemediator3", 
   label = "tree3", rownames = c("1, 5", "2, 3, 4, 6, 7, 8", "9"),
   caption = "Distinction centrality scores for tree broker graph (three-branches).")
   ## Tree Mediator (Two Branch Plus Long Tie)
   t222l <- t222 + edge(6, 2) # tree mediator two branch plus long
   plot.toys(t222l, "tree-mediator2-long.png", "auto")
   tab.cent(distinction(t222l), name = "treemediatorlong2", 
   label = "treelong2", rownames = c("1, 4", "2, 6", "3, 5", "7"),
   caption = "Distinction centrality scores for tree broker graph (two-branches plus long tie).")
   t232l <- t232 + edge(7, 2) # tree mediator three branch plus long
   plot.toys(t232l, "tree-mediator3-long.png", "auto")
   tab.cent(distinction(t232l), name = "treemediatorlong3", 
   label = "treelong3", rownames = c("1, 5", "2, 7", "3, 4, 6, 8", "9"),
   caption = "Distinction centrality scores for tree broker graph (three-branches plus long tie).")
   c1 <- make_ring(4)
   c2 <- make_ring(4)
   V(c1)$name <- as.character(1:4)
   V(c2)$name <- as.character(4:7)
   cw <- c1 + c2  # circle weld
   tc <- cw + edge(2, 4)
   tc <- tc + edge(4, 6) # two-connected
   tcl <- tc + edge(1, 7) # two-connected plus long tie
   cw <- del.names(cw)
   tc <- del.names(tc)
   tcl <- del.names(tcl)
   ## Circle Weld
   plot.toys(cw, "circle-weld.png", "auto")
   tab.cent(distinction(cw), name = "circleweld", 
   label = "cw", rownames = c("1, 3, 5, 7", "2, 6", "4"),
   caption = "Distinction centrality scores for the circle weld graph.")
   ## Two-Connected
   plot.toys(tc, "two-connected.png", "kk")
   tab.cent(distinction(tc), name = "twoconnected", 
   label = "tc", rownames = c("1, 3, 5, 7", "2, 6", "4"),
   caption = "Distinction centrality scores for the two-connected graph.")
   ## Two-Connected Plus Long Tie
   plot.toys(tcl, "two-connected-long.png", "kk")
   tab.cent(distinction(tcl), name = "twoconnectedlong", 
   label = "tcl", rownames = c("1, 7", "2, 6", "3, 5", "4"),
   caption = "Distinction centrality scores for the two-connected graph (plus long tie).")
```

## Medici

```{r Loading Medici Data}
   medici1 <- as.matrix(read.csv(here("Data", "MediciEdgeList.csv")))
   medici1 <- graph_from_edgelist(medici1, directed = FALSE)
   medici2 <- as.matrix(read.csv(here("Data", "MediciEdgeListMarriageCut.csv")))
   medici2 <- graph_from_edgelist(medici2, directed = FALSE)
   nomedici <- as.matrix(read.csv(here("Data", "NoMediciEdgeList.csv")))
   nomedici <- graph_from_edgelist(nomedici, directed = FALSE)
```

```{r Medici Distintion Plots}
   png(here("Plots", "medici.png"), height = 600, width = 1000)
      plot.graph.norm(medici1, ts = 5)
   dev.off()
   png(here("Plots", "nomedici.png"), height = 600, width = 1000)
      plot.graph.norm(nomedici, ts = 5)
   dev.off()
```

## Political Data

```{r Loading TestPolitical Data}
   poli1 <- as.matrix(read.csv(here("Data", "poli1.csv")))
   poli1 <- graph_from_edgelist(poli1, directed = FALSE)
   poli2 <- as.matrix(read.csv(here("Data", "poli2.csv")))
   poli2 <- graph_from_edgelist(poli2, directed = FALSE)
   poli3 <- as.matrix(read.csv(here("Data", "poli3.csv")))
   poli3 <- graph_from_edgelist(poli3, directed = FALSE)
   poli4 <- as.matrix(read.csv(here("Data", "poli4.csv")))
   poli4 <- graph_from_edgelist(poli4, directed = FALSE)
   png(here("Plots", "poli1.png"), height = 600, width = 1000)
   plot.graph.norm(poli1, l = "auto")
   dev.off()
   png(here("Plots", "poli2.png"), height = 600, width = 1000)
   plot.graph.norm(poli2, l = "auto")
   dev.off()
   png(here("Plots", "poli3.png"), height = 600, width = 1000)
   plot.graph.norm(poli3, l = "auto")
   dev.off()
   png(here("Plots", "poli4.png"), height = 600, width = 1000)
   plot.graph.norm(poli4, l = "auto")
   dev.off()
```

## Search

```{r Search Model Distinction}
   g <- as.matrix(read.csv(here("Data", "searchmodeltest.csv")))
   g <- graph_from_edgelist(g, directed = FALSE)
   distinction(g)
```

## Star Graph Computational Experiments


```{r}
   source(here("Functions", "distinction.R"))
   make.stars <- function(n = 30) {
      gl <- vector(mode = "list", length = n)
      gl[[1]] <- make_star(3, mode = "undirected") 
      for (k in 2:n) {
         gl[[k]] <- make_star(k+2, mode = "undirected") 
         }
      return(gl)
      }
   b <- make.stars(33)
   c <- lapply(b, distinction)
   ds.s <- sapply(c, function(x) {x[1, 3]})
   ds.p <- sapply(c, function(x) {x[2, 3]})
   d.s <- sapply(c, function(x) {x[1, 2]})
   d.p <- sapply(c, function(x) {x[2, 2]})
   dat <- data.frame(d = c(ds.s, ds.p, d.s, d.p), 
         n = c(1:length(d.s), 1:length(d.s), 1:length(d.s), 1:length(d.s)),
         g = c(rep(1, length(d.s)), rep(2, length(d.s)), 
         rep(3, length(d.s)), rep(4, length(d.s)))) |> 
         mutate(g = factor(g, labels = c(
                           "Scaled Distinction (Central Node)", 
                           "Scaled Distinction (Peripheral Nodes)", 
                           "Non-scaled Distinction (Central Node)",
                           "Non-scaled Distinction (Peripheral Nodes)"))) |> 
         mutate(n = n + 2)
   p <- ggplot(dat, aes(n, d, group = g, color = as.factor(g))) 
   p <- p + geom_point(size = 3)
   p <- p + geom_line(linewidth = 0.75)
   p <- p + geom_hline(yintercept = 0, color = "red", linetype = 2)
   p <- p + labs(y = "", x = "Star Size")
   p <- p + scale_x_continuous(breaks = seq(3, length(d.s), by = 3))
   p <- p + scale_color_manual(values = c("red", "blue", "tan2", "purple"))
   p <- p + theme_minimal()
   p <- p + theme(axis.text = element_text(size = 14, face = "bold"),
                  axis.title = element_text(size = 16, face = "bold"),
                  legend.text = element_text(size = 12, face = "bold"),
                  legend.title = element_blank(),
                  legend.position = "bottom"
                  )
   p <- p + guides(color = guide_legend(nrow = 4))
   p
   ggsave(here("Plots", "star-roles-by-size.png"), width = 7, height = 8, units = "in")
```

## Connected Caves Computational Experiments

```{r Connected Caves}
   source(here("Functions", "connect.caves.R"))
   source(here("Functions", "gg2.R"))
   set.seed(456)
   b <- connect.caves(c = 4, nc = 4, n = 24)
   p.list <- lapply(b, gg2, lay.o = "auto")
   for (i in 1:length(p.list)) {
      p.list[[i]] <- p.list[[i]] + ggtitle(paste("N. Long Ties =", i-1)) +
         theme(plot.title = element_text(size = 11))
      }
   wrap_plots(p.list[c(1:4)], nrow = 2)
   ggsave(here("Plots", "connected-caves-examples1.png"), width = 10, height = 10, units = "in")
   wrap_plots(p.list[c(5:8)], nrow = 2)
   ggsave(here("Plots", "connected-caves-examples2.png"), width = 10, height = 10, units = "in")
   wrap_plots(p.list[c(9:12)], nrow = 2)
   ggsave(here("Plots", "connected-caves-examples3.png"), width = 10, height = 10, units = "in")
   wrap_plots(p.list[c(13:16)], nrow = 2)
   ggsave(here("Plots", "connected-caves-examples4.png"), width = 10, height = 10, units = "in")
```

## Broker Computational Experiments

```{r}
   source(here("Functions", "make.broker.trees.R"))
   source(here("Functions", "gg.R"))
   b <- make.broker.trees(30)
   p.list <- lapply(b, gg)
   for (i in 1:length(p.list)) {
      p.list[[i]] <- p.list[[i]] + ggtitle(paste("N. Branches =", i+1)) +
         theme(plot.title = element_text(size = 11))
      }
   wrap_plots(p.list[c(1:6)], nrow = 2)
   ggsave(here("Plots", "tree-examples.png"), width = 12, height = 8, units = "in")
```

```{r}
   b <- make.broker.trees(30)
   c <- lapply(b, distinction, norm = "max")
   d.s <- sapply(c, function(x) {x[1, 3]})
   d.b <- sapply(c, function(x) {x[2, 3]})
   d.p <- sapply(c, function(x) {x[nrow(x), 3]})
   dat <- data.frame(d = c(d.s, d.b, d.p), 
         n = c(1:length(d.s)+1, 1:length(d.s)+1, 1:length(d.s)+1),
         g = c(rep(1, length(d.s)), rep(2, length(d.s)), 
         rep(3, length(d.s)))) |> 
         mutate(g = factor(g, labels = c("Star", "Gatekeeper", "Peripheral")))
   p <- ggplot(dat, aes(n, d, group = g, color = as.factor(g))) 
   p <- p + geom_point(size = 3)
   p <- p + geom_line(linewidth = 0.75)
   p <- p + geom_hline(yintercept = 0, color = "red", linetype = 2)
   p <- p + labs(y = "", x = "Number of Branches")
   p <- p + scale_x_continuous(breaks = seq(2, length(d.s), by = 2))
   p <- p + scale_color_manual(values = c("red", "blue", "tan2"))
   p <- p + theme_minimal()
   p1 <- p + theme(axis.text = element_text(size = 14, face = "bold"),
                  axis.title = element_text(size = 16, face = "bold"),
                  legend.text = element_text(size = 16, face = "bold"),
                  legend.title = element_blank(),
                  legend.position = "top"
                  ) + ggtitle("Abs. Value Norm")
   c <- lapply(b, distinction, norm = "abm")
   d.s <- sapply(c, function(x) {x[1, 3]})
   d.b <- sapply(c, function(x) {x[2, 3]})
   d.p <- sapply(c, function(x) {x[nrow(x), 3]})
   dat <- data.frame(d = c(d.s, d.b, d.p), 
         n = c(1:length(d.s)+1, 1:length(d.s)+1, 1:length(d.s)+1),
         g = c(rep(1, length(d.s)), rep(2, length(d.s)), 
         rep(3, length(d.s)))) |> 
         mutate(g = factor(g, labels = c("Star", "Gatekeeper", "Peripheral")))
   p <- ggplot(dat, aes(n, d, group = g, color = as.factor(g))) 
   p <- p + geom_point(size = 3)
   p <- p + geom_line(linewidth = 0.75)
   p <- p + geom_hline(yintercept = 0, color = "red", linetype = 2)
   p <- p + labs(y = "", x = "Number of Branches")
   p <- p + scale_x_continuous(breaks = seq(2, length(d.s), by = 2))
   p <- p + scale_color_manual(values = c("red", "blue", "tan2"))
   p <- p + theme_minimal()
   p2 <- p + theme(axis.text = element_text(size = 14, face = "bold"),
                  axis.title = element_text(size = 16, face = "bold"),
                  legend.text = element_text(size = 16, face = "bold"),
                  legend.title = element_blank(),
                  legend.position = "top"
                  ) + ggtitle("Squared Norm")
   library(patchwork)
   p1 + p2
   ggsave(here("Plots", "broker-tree-roles-by-nbranches.png"), width = 10, height = 7, units = "in")
```

```{r}
   source(here("Functions", "make.broker.cliques.R"))
   source(here("Functions", "gg.R"))
   b <- make.broker.cliques(30)
   p.list <- lapply(b, gg, star = 9)
   for (i in 1:length(p.list)) {
      p.list[[i]] <- p.list[[i]] + ggtitle(paste("N. Branches =", i+1)) +
         theme(plot.title = element_text(size = 11))
      }
   wrap_plots(p.list[c(1:6)], nrow = 2)
   ggsave(here("Plots", "clique-examples.png"), width = 12, height = 8, units = "in")
```

```{r}
   c <- lapply(b, distinction, norm = "abm")
   d.s <- sapply(c, function(x) {x[9, 3]})
   d.b <- sapply(c, function(x) {x[4, 3]})
   d.p <- sapply(c, function(x) {x[1, 3]})
   dat <- data.frame(d = c(d.s, d.b, d.p), 
         n = c(1:length(d.s)+1, 1:length(d.s)+1, 1:length(d.s)+1),
         g = c(rep(1, length(d.s)), rep(2, length(d.s)), 
         rep(3, length(d.s)))) |> 
         mutate(g = factor(g, labels = c("Star", "Gatekeeper", "Peripheral")))
   p <- ggplot(dat, aes(n, d, group = g, color = as.factor(g))) 
   p <- p + geom_point(size = 3)
   p <- p + geom_line(linewidth = 0.75)
   p <- p + geom_hline(yintercept = 0, color = "red", linetype = 2)
   p <- p + labs(y = "", x = "Number of Branches")
   p <- p + scale_x_continuous(breaks = seq(2, length(d.s), by = 2))
   p <- p + scale_color_manual(values = c("red", "blue", "tan2"))
   p <- p + theme_minimal()
   p <- p + theme(axis.text = element_text(size = 14, face = "bold"),
                  axis.title = element_text(size = 16, face = "bold"),
                  legend.text = element_text(size = 16, face = "bold"),
                  legend.title = element_blank(),
                  legend.position = "top"
                  )
   p
   ggsave(here("Plots", "broker-cliques-roles-by-nbranches.png"), width = 7, height = 7, units = "in")
```

```{r}
   library(networkdata)
   distinction(karate, norm = "max")
   plot.graph.norm(karate)
```

## Kite Computational Experiments

```{r}
   # Vary size of kite clique
   # Vary kite density holding clique size constant
```
