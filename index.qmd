---
title: "Jilbert's Distinction Centrality"
execute: 
  eval: true
  echo: true
  output: true
  warning: false
  message: false
format: 
   html:
      code-line-numbers: true
bibliography: networks.bib
---

```{r Loading Functions}
   library(igraph)
   library(ggraph)
   library(here)
   library(networkdata)
   library(ggpubr)
   source("distinction.R")
```


According to @jilbert24, the Distinction Centrality ($D_i$) of a node is given by the difference between the *status* ($S_i(G)$) and the *constraint* ($C_i(G)$) experienced by each node:

$$
   D_i = S_i(G)  - C_i(G)
$$

Status is measured using the usual Bonacich eigenvector centrality (normalized to have maximum 1.0) computed in the full graph $G$. Constraint, in turn, is given by the average status of $i$'s neighbor in the *node deleted subgraph* that excludes $i$. 

$$
C_i(G) = \frac{\sum_{j \in N(i)} S_j(G - i)}{N} 
$$

Where $N(i)$ is the set of $i$'s neighbors, and $S_j(G -i)$ is the eigenvector centrality of node $j$ in the node deleted subgraph of $G$ that excludes $i$. Nodes are more constrained to the extent that others gain status in their absence. The Distinction of a node thus increases with its own status and decreases to the extent that others would gain status if that node was not around.

The normalized version of Distinction Centrality ($D^*$) multiplies each node's status score by the parameter $\theta$, which is ratio of the average of constrain scores and the average of status scores of each node in the the network:

$$
\gamma = \frac{\frac{1}{N}\sum_i C_i(G)}{\frac{1}{N}\sum_i S_i(G)}
$$

The normalized distinction is then given by:

$$
D^*_i = \gamma S_i(G)  - C_i(G)
$$

```{r Custom Functions}
#| echo: false
   plot.graph <- function(x, l, vs = 12, ts = 6) { #plotting function
      library(ggraph)
      d <- distinction(x)$d
      nc <- rep("", length(d))
      nc[which(d < -0.05)] <- "red"
      nc[which(d > 0.05)] <- "blue"
      nc[which(d <= 0.05 & d >= -0.05)] <- "purple"
      if (is.null(V(x)$name) == TRUE) {
         n <- 1:vcount(x)
         tc <- "white"
         s <- vs
         }
      if (is.null(V(x)$name) == FALSE) {
         n <- V(x)$name
         tc <- nc
         vs <- 0
         }
      p <- ggraph(x, layout = l)
      p <- p + geom_edge_link(color = "steelblue", edge_width = 0.5)
      p <- p + geom_node_point(aes(x = x, y = y), size = vs, color = nc) 
      p <- p + geom_node_text(aes(label = n), size = ts, color = tc)
      p <- p + theme_graph() 
   return(p)
   }
   plot.graph.norm <- function(x, l, vs = 12, ts = 6) { #plotting function
      library(ggraph)
      d <- distinction(x, norm = TRUE)$d
      nc <- rep("", length(d))
      nc[which(d < -0.05)] <- "red"
      nc[which(d > 0.05)] <- "blue"
      nc[which(d <= 0.05 & d >= -0.05)] <- "purple"
      if (is.null(V(x)$name) == TRUE) {
         n <- 1:vcount(x)
         tc <- "white"
         s <- vs
         }
      if (is.null(V(x)$name) == FALSE) {
         n <- V(x)$name
         tc <- nc
         vs <- 0
         }
      p <- ggraph(x, layout = l)
      p <- p + geom_edge_link(color = "steelblue", edge_width = 0.5)
      p <- p + geom_node_point(aes(x = x, y = y), size = vs, color = nc) 
      p <- p + geom_node_text(aes(label = n), size = ts, color = tc)
      p <- p + theme_graph() 
   return(p)
   }

   tab.cent <- function(x, d = 3) { #table function
   library(kableExtra)
   t <- kbl(x, 
       digits = d, row.names = FALSE,
       col.names = c("Node", "Distinction", "Status", "Constraint")) %>% 
      kable_styling(bootstrap_options = c("hover", "condensed", "responsive"))
   return(t)
   }
```

```{r}
    g1 <- make_star(7, mode = "undirected") # star graph
    g2 <- g1 + edge(2,3)
    g2 <- g2 + edge(2,4)
    g2 <- g2 + edge(3,4)
    g2 <- g2 + edge(5,6)
    g2 <- g2 + edge(5,7)
    g2 <- g2 + edge(6,7) # structural fold
    g3 <- g1 + edge(2,4)
    g3 <- g3 + edge(3,4)
    g3 <- g3 + edge(5,6)
    g3 <- g3 + edge(5,7) # intra-connected clusters
    g4 <- g3 + edge(2,7) # inter-connected clusters
```



```{r}
#| tbl-cap: "Distinction Centrality Scores of Nodes in the Star Graph."
   tab.cent(distinction(g1)[, 1:4])
```

```{r}
#| tbl-cap: "Distinction Centrality Scores of Nodes in the Star Graph (Normalized)."
   tab.cent(distinction(g1, norm = TRUE)[, 1:4])
```

```{r}
#| tbl-cap: "Distinction Centrality Scores of Nodes in the Structural Fold."
   tab.cent(distinction(g2)[, 1:4])
```

```{r}
#| tbl-cap: "Distinction Centrality Scores of Nodes in the Structural Fold (Normalized)."
   tab.cent(distinction(g2, norm = TRUE)[, 1:4])
```


